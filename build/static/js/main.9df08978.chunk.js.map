{"version":3,"sources":["components/Header/Header.js","components/Home/Home.js","components/Feelings/Feelings.js","components/Understanding/Understanding.js","components/Support/Support.js","components/Comments/Comments.js","components/Summary/Summary.js","components/Thanks/Thanks.js","components/App/App.js","index.js"],"names":["Header","react_default","a","createElement","className","Component","connect","reduxStore","Home","handleNextButton","event","_this","props","history","push","Card_default","raised","Button_default","size","variant","onClick","this","Feelings","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","action","type","payload","state","input","dispatch","setState","updateFeelings","target","value","CardContent_default","TextField_default","placeholder","onChange","Understanding","updateUnderstanding","updateSupport","Comments","updateComments","Summary","handleSubmit","feedback","feelings","understanding","support","comments","axios","method","url","data","then","response","catch","error","errorMessage","concat","alert","console","log","status","buttonText","onSubmit","disabled","Thanks","color","App","components_Header_Header","HashRouter","Route","exact","path","component","Support","storeInstance","createStore","combineReducers","arguments","length","undefined","applyMiddleware","logger","ReactDOM","render","es","store","components_App_App","document","getElementById"],"mappings":"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","file":"static/js/main.9df08978.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport '../App/App.css';\n\nclass Header extends Component {\n    render() {\n        return (\n            <header className=\"head\">\n                <h1 >Feedback</h1>\n            </header>\n        )\n    }\n}\n\nconst mapReduxStoreToProps = (reduxStore) => ({\n    reduxStore: reduxStore\n});\nexport default connect(mapReduxStoreToProps)(Header);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport '../App/App.css';\nimport Card from '@material-ui/core/Card';\nimport Button from '@material-ui/core/Button';\nclass Home extends Component {\n\n    // On the click event, we move the user to the feelings page.\n    handleNextButton = (event) => {\n        this.props.history.push('/summary/feelings');\n    }\n    //Renders a card that is styled in app.css.\n    //The card contains the button with this components click event.\n    render() {\n        return (\n            <div className=\"container\">\n                <Card raised=\"true\" className=\"card\">\n                    <h1>Ready to begin your feeback?</h1>\n                    <h3>Click next to start your feedback</h3>\n                    <Button size=\"large\" variant=\"contained\"\n                        onClick={this.handleNextButton}>Next</Button>\n                </Card>\n            </div>\n        )\n    }\n}\n\nconst mapReduxStoreToProps = (reduxStore) => ({\n    reduxStore: reduxStore\n});\nexport default connect(mapReduxStoreToProps)(Home);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport '../App/App.css'\nimport Card from '@material-ui/core/Card';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport CardContent from '@material-ui/core/CardContent';\n\nclass Feelings extends Component {\n    //state is an empty string to start\n    constructor() {\n        super();\n        this.state = {\n            input: '',\n        }\n    }\n\n    // On the click event, we will dispatch the previously mutated state,\n    // and then reset the state to an empty string.\n    // Last, we move the user to the understanding page.\n    handleNextButton = (event) => {\n        const action = { type: 'SET_FEELINGS', payload: this.state.input };\n        this.props.dispatch(action);\n        this.setState({\n            input: '',\n        })\n        this.props.history.push('/summary/understanding');\n    }\n\n    //Sets the local state to whatever is entered in the input field.\n    updateFeelings = (event) => {\n        this.setState({\n            input: event.target.value,\n        })\n    }\n\n    //Renders a card that is styled in app.css.\n    //The card contains the button with this components click event\n    //and the input field that sets the local state.\n    render() {\n        return (\n            <div className=\"container\">\n                <Card raised=\"true\" className=\"card\">\n                    <h1>How are you feeling today?</h1>\n                    <CardContent className=\"content\">\n                        <TextField variant=\"outlined\" type=\"number\" placeholder=\"1-5, 5 is best\"\n                            onChange={this.updateFeelings} />\n                        <Button size=\"large\" variant=\"contained\" onClick={this.handleNextButton}>Next</Button>\n                    </CardContent>\n                </Card>\n            </div>\n        )\n    }\n}\n\nconst mapReduxStoreToProps = (reduxStore) => ({\n    reduxStore: reduxStore\n});\nexport default connect(mapReduxStoreToProps)(Feelings);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport '../App/App.css'\nimport Card from '@material-ui/core/Card';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport CardContent from '@material-ui/core/CardContent';\nclass Understanding extends Component {\n    //state is an empty string to start\n    constructor() {\n        super();\n        this.state = {\n            input: '',\n        }\n    }\n\n    // On the click event, we will dispatch the previously mutated state,\n    // and then reset the state to an empty string.\n    // Last, we move the user to the support page.\n    handleNextButton = (event) => {\n        const action = { type: 'SET_UNDERSTANDING', payload: this.state.input };\n        this.props.dispatch(action);\n        this.setState({\n            input: '',\n        })\n        this.props.history.push('/summary/support');\n    }\n\n    //Sets the local state to whatever is entered in the input field.\n    updateUnderstanding = (event) => {\n        this.setState({\n            input: event.target.value,\n        })\n    }\n\n    //Renders a card that is styled in app.css.\n    //The card contains the button with this components click event\n    //and the input field that sets the local state.\n    render() {\n        return (\n            <div className=\"container\">\n                <Card raised=\"true\" className=\"card\">\n                    <h1>How well are you understanding the content?</h1>\n                    <CardContent className=\"content\">\n                        <TextField variant=\"outlined\" type=\"number\" placeholder=\"1-5, 5 is best\"\n                            onChange={this.updateUnderstanding} />\n                        <Button size=\"large\" variant=\"contained\" onClick={this.handleNextButton}>Next</Button>\n                    </CardContent>\n                </Card>\n            </div>\n        )\n    }\n}\n\nconst mapReduxStoreToProps = (reduxStore) => ({\n    reduxStore: reduxStore\n});\nexport default connect(mapReduxStoreToProps)(Understanding);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport '../App/App.css';\nimport Card from '@material-ui/core/Card';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport CardContent from '@material-ui/core/CardContent';\n\nclass Understanding extends Component {\n    //state is an empty string to start\n    constructor() {\n        super();\n        this.state = {\n            input: '',\n        }\n    }\n\n    // On the click event, we will dispatch the previously mutated state,\n    // and then reset the state to an empty string.\n    // Last, we move the user to the comments page.\n    handleNextButton = (event) => {\n        const action = { type: 'SET_SUPPORT', payload: this.state.input };\n        this.props.dispatch(action);\n        this.setState({\n            input: '',\n        })\n        this.props.history.push('/summary/comments');\n    }\n\n    //Sets the local state to whatever is entered in the input field.\n    updateSupport = (event) => {\n        this.setState({\n            input: event.target.value,\n        })\n    }\n    \n    //Renders a card that is styled in app.css.\n    //The card contains the button with this components click event\n    //and the input field that sets the local state.\n    render() {\n        return (\n            <div className=\"container\">\n                <Card raised=\"true\" className=\"card\">\n                    <h1>How well are you being supported?</h1>\n                    <CardContent className=\"content\">\n                        <TextField variant=\"outlined\" type=\"number\" placeholder=\"1-5, 5 is best\"\n                            onChange={this.updateSupport} />\n                        <Button size=\"large\" variant=\"contained\" onClick={this.handleNextButton}>Next</Button>\n                    </CardContent>\n                </Card>\n            </div>\n        )\n    }\n}\n\nconst mapReduxStoreToProps = (reduxStore) => ({\n    reduxStore: reduxStore\n});\nexport default connect(mapReduxStoreToProps)(Understanding);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport '../App/App.css'\nimport Card from '@material-ui/core/Card';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport CardContent from '@material-ui/core/CardContent';\n\nclass Comments extends Component {\n    //state is an empty string to start\n    constructor() {\n        super();\n        this.state = {\n            input: '',\n        }\n    }\n    \n    // On the click event, we will dispatch the previously mutated state,\n    // and then reset the state to an empty string.\n    // Last, we move the user to the summary page.\n    handleNextButton = (event) => {\n        const action = { type: 'SET_COMMENTS', payload: this.state.input };\n        this.props.dispatch(action);\n        this.setState({\n            input: '',\n        })\n        this.props.history.push('/summary');\n    }\n\n    //Sets the local state to whatever is entered in the input field.\n    updateComments = (event) => {\n        this.setState({\n            input: event.target.value,\n        })\n    }\n\n    //Renders a card that is styled in app.css.\n    //The card contains the button with this components click event\n    //and the input field that sets the local state.\n    render() {\n        return (\n            <div className=\"container\">\n                <Card raised=\"true\" className=\"card\">\n                    <h1>Any comments you want to leave?</h1>\n                    <CardContent className=\"content\">\n                        <TextField variant=\"outlined\" type=\"text\" placeholder=\"leave comments here\"\n                            onChange={this.updateComments} />\n                        <Button size=\"large\" variant=\"contained\" onClick={this.handleNextButton}>Next</Button>\n                    </CardContent>\n                </Card>\n            </div>\n        )\n    }\n}\n\nconst mapReduxStoreToProps = (reduxStore) => ({\n    reduxStore: reduxStore\n});\nexport default connect(mapReduxStoreToProps)(Comments);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport '../App/App.css';\nimport Card from '@material-ui/core/Card';\nimport Button from '@material-ui/core/Button';\n\nclass Summary extends Component {\n\n    // On the click event, we will post all the reduxstore data,\n    // in the feedback object, to the server to be added to the database.\n    handleSubmit = () => {\n        let feedback = {\n            feelings: this.props.reduxStore.feelings,\n            understanding: this.props.reduxStore.understanding,\n            support: this.props.reduxStore.support,\n            comments: this.props.reduxStore.comments\n        }\n        axios({\n            method: 'POST',\n            url: '/feedback',\n            data: feedback,\n        }).then((response) => {\n            // Last, we move the user to the thanks page.\n            this.props.history.push('/thanks');\n        }).catch((error) => {\n            //We catch errors if they occur.\n            const errorMessage = `Server error: ${error}`;\n            alert(errorMessage);\n            console.log(errorMessage);\n        });\n        // We then set and dispatch the reduxstore data \n        // back to zeroes and an empty string, depending.\n        const actionf = { type: 'SET_FEELINGS', payload: 0 };\n        this.props.dispatch(actionf);\n        const actionu = { type: 'SET_UNDERSTANDING', payload: 0 };\n        this.props.dispatch(actionu);\n        const actions = { type: 'SET_SUPPORT', payload: 0 };\n        this.props.dispatch(actions);\n        const actionc = { type: 'SET_COMMENTS', payload: '' };\n        this.props.dispatch(actionc);\n    }\n\n    render() {\n        //conditionally rendering wether the button on this component is disabled\n        //and if the button text reads 'incomplete' or 'submit'.\n        let status = '';\n        let buttonText = '';\n        if (this.props.reduxStore.feelings === 0 ||\n            this.props.reduxStore.understanding === 0 ||\n            this.props.reduxStore.support === 0 ||\n            this.props.reduxStore.comments === '') {\n            buttonText = \"Incomplete\"\n            status = true;\n\n        } else {\n            buttonText = \"Submit\"\n            status = false;\n        }\n        //Renders a card that is styled in app.css.\n        //Displays the information from the reduxstore.\n        //The card contains the button with this components click event.\n        return (\n            <div className=\"container\">\n                <Card raised=\"true\" className=\"card\">\n                    <form onSubmit={this.handleSubmit}>\n                        <h1>Review your feedback</h1>\n                        <p>Feelings: {this.props.reduxStore.feelings}</p>\n                        <p>Understanding: {this.props.reduxStore.understanding}</p>\n                        <p>Support: {this.props.reduxStore.support}</p>\n                        <p>Comments: {this.props.reduxStore.comments}</p>\n                        <Button size=\"large\" variant=\"contained\"\n                            type=\"submit\" disabled={status}>{buttonText}</Button>\n                    </form>\n                </Card>\n            </div>\n        )\n    }\n}\n\nconst mapReduxStoreToProps = (reduxStore) => ({\n    reduxStore: reduxStore\n});\nexport default connect(mapReduxStoreToProps)(Summary);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport '../App/App.css';\nimport Card from '@material-ui/core/Card';\nimport Button from '@material-ui/core/Button';\n\nclass Thanks extends Component {\n\n    // On the click event, we move the user to the home page.\n    handleNextButton = (event) => {\n        this.props.history.push('/');\n    }\n    \n    //Renders a card that is styled in app.css.\n    //The card contains the button with this components click event.\n    render() {\n        return (\n            <div className=\"container\">\n                <Card className=\"card\">\n                    <h1>Thank you!</h1>\n                    <Button variant=\"contained\" color=\"primary\" size=\"large\"\n                        onClick={this.handleNextButton}>Home</Button>\n                </Card>\n            </div>\n        )\n    }\n}\n\nconst mapReduxStoreToProps = (reduxStore) => ({\n    reduxStore: reduxStore\n});\nexport default connect(mapReduxStoreToProps)(Thanks);","//We import all the components we want to make routes for\nimport React, { Component } from 'react';\nimport { HashRouter as Router, Route, } from 'react-router-dom';\nimport './App.css';\nimport Header from '../Header/Header.js';\nimport Home from '../Home/Home.js';\nimport Feelings from '../Feelings/Feelings.js';\nimport Understanding from '../Understanding/Understanding.js';\nimport Support from '../Support/Support.js';\nimport Comments from '../Comments/Comments.js';\nimport Summary from '../Summary/Summary.js';\nimport Thanks from '../Thanks/Thanks.js';\n\nclass App extends Component {\n  //Renders the header component and handles all the routes of the project.\n  render() {\n    return (\n      <div>\n        <Header />\n        <Router>\n          <div>\n            {/* The summary route is not an exact path so that it can \n            be seen on any other page that puts /summary in its route. */}\n            <Route exact path='/' component={Home} />\n            <Route exact path='/summary/feelings' component={Feelings} />\n            <Route exact path='/summary/understanding' component={Understanding} />\n            <Route exact path='/summary/support' component={Support} />\n            <Route exact path='/summary/comments' component={Comments} />\n            <Route path='/summary' component={Summary} />\n            <Route exact path='/thanks' component={Thanks} />\n          </div>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport logger from 'redux-logger';\n\n//This reducer keeps the value we assign on the feelings page to be used\n//in the project whenever its called. We later reset it back to zero when we \n//submit to the database.\nconst feelings = (state = 0, action) => {\n    if (action.type === 'SET_FEELINGS') {\n        return action.payload;\n    }\n    return state;\n}\n\n\n\n//This reducer keeps the value we assign on the understanding page to be used\n//in the project whenever its called. We later reset it back to zero when we \n//submit to the database.\nconst understanding = (state = 0, action) => {\n    if (action.type === 'SET_UNDERSTANDING') {\n        return action.payload;\n    }\n    return state;\n}\n\n//This reducer keeps the value we assign on the support page to be used\n//in the project whenever its called. We later reset it back to zero when we \n//submit to the database.\nconst support = (state = 0, action) => {\n    if (action.type === 'SET_SUPPORT') {\n        return action.payload;\n    }\n    return state;\n}\n\n//This reducer keeps the value we assign on the comments page to be used\n//in the project whenever its called. We later reset it back to an empty string \n//when we submit to the database.\nconst comments = (state = '', action) => {\n    if (action.type === 'SET_COMMENTS') {\n        return action.payload;\n    }\n    return state;\n}\n\n//reducers to be used in our reducerstore.\nconst storeInstance = createStore(\n    combineReducers({\n        feelings,\n        understanding,\n        support,\n        comments,\n    }),\n    applyMiddleware(logger),\n);\n\nReactDOM.render(<Provider store={storeInstance}><App /></Provider>, document.getElementById('root'));\n"],"sourceRoot":""}